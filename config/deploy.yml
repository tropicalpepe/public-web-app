# Name of your application. Used to uniquely configure containers.
service: web-app

# Name of the container image.
image: tropicalpepe/web-app

# Deploy to these servers.
servers:
  web:
    - <%= ENV['HOST_PUBLIC_STATIC_IP'] %> # here is my actual ip, just didnt want to share it
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt (and allow for multiple apps on one server).
# If using something like Cloudflare, it is recommended to set encryption mode 
# in Cloudflare's SSL/TLS setting to "Full" to enable end-to-end encryption. 
proxy: 
  ssl: true
  host: <%= ENV['HOST'] %>
  # kamal-proxy connects to your container over port 80, use `app_port` to specify a different port.
  app_port: 3000
# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  # server: registry.digitalocean.com / ghcr.io / ...
  username: tropicalpepe

  # Always use an access token rather than real password (pulled from .kamal/secrets).
  password:
    - KAMAL_REGISTRY_PASSWORD

# Configure builder setup.
builder:
  arch: amd64

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
env:
 clear:
   RAILS_ENV: production
   RACK_ENV: production
   RAILS_LOG_TO_STDOUT: true
   RAILS_SERVE_STATIC_FILES: true
 secret:
   - RAILS_MASTER_KEY
   - DB_NAME
   - DB_USER
   - DB_PASSWORD
   - DB_HOST
   - DB_PORT
# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
#
# aliases:
#   shell: app exec --interactive --reuse "bash"

# Use a different ssh user than root
#
ssh:
 user: ubuntu
 keys: [ "~/.ssh/private-key.pem" ]

# Use a persistent storage volume.
#
volumes:
 - "web_app_storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
#asset_path: /app/assets

# Configure rolling deploys by setting a wait time between batches of restarts.
#
# boot:
#   limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
#   wait: 2

# Use accessory services (secrets come from .kamal/secrets).
#
accessories:
 db:
   image: postgres:14.13
   host: <%= ENV['HOST_PUBLIC_STATIC_IP'] %> # here is my actual ip, just didnt want to share it
   port: 5432
   env:
     clear:
       POSTGRES_USER: 'web_app_user'
       POSTGRES_DB: 'web_app_production'
     secret:
       - POSTGRES_PASSWORD
   directories:
     - data:/var/lib/postgresql/data
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
